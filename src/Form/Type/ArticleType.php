<?php

declare(strict_types=1);

namespace Vex6\OpenArticles\Form\Type;

use PrestaShop\PrestaShop\Core\ConstraintValidator\Constraints\CleanHtml;
use PrestaShopBundle\Form\Admin\Type\CustomContentType;
use PrestaShopBundle\Form\Admin\Type\FormattedTextareaType;
use PrestaShopBundle\Form\Admin\Type\SwitchType;
use PrestaShopBundle\Form\Admin\Type\TranslatableType;
use PrestaShopBundle\Form\Admin\Type\TranslateType;
use PrestaShopBundle\Form\Admin\Type\TranslatorAwareType;
use Symfony\Component\Form\Extension\Core\Type\ChoiceType;
use Symfony\Component\Form\Extension\Core\Type\FileType;
use Symfony\Component\Form\Extension\Core\Type\TextareaType;
use Symfony\Component\Form\Extension\Core\Type\TextType;
use Symfony\Component\Form\FormBuilderInterface;
use Symfony\Contracts\Translation\TranslatorInterface;
use Vex6\OpenArticles\Repository\ArticleRepository;
use Vex6\OpenArticles\Uploader\ArticleImageUploader;

class ArticleType extends TranslatorAwareType
{

    /**
     * @var ArticleRepository
     */
    private $repository;

    /**
     * @param TranslatorInterface $translator
     * @param array $locales
     * @param ArticleRepository $repository
     */
    public function __construct(
        TranslatorInterface $translator,
        array $locales,
        ArticleRepository $repository)
    {
        parent::__construct($translator, $locales);
        $this->repository = $repository;
    }

    /**
     * @param FormBuilderInterface $builder
     * @param array $options
     * @return void
     */
    public function buildForm(FormBuilderInterface $builder, array $options)
    {
        parent::buildForm($builder, $options); // TODO: Change the autogenerated stub
        $builder->add('title', TranslatableType::class, [
            'type' => TextType::class,
            'required' => true,
            'label' => $this->trans('Titre', 'Modules.Openarticles.Admin')
        ])->add('product_id', ChoiceType::class, [
            'required' => false,
            'label' => $this->trans('Produit', 'Admin.Catalog.Feature'),
            'choices' => $this->repository->getProducts(),
            'choice_translation_domain' => 'Admin.Some.Domain',
        ])->add('resume', TranslateType::class, [
            'type' => TextareaType::class,
            'locales' => $this->locales,
            'hideTabs' => false,
            'required' => false,
            'label' => $this->trans('Résumé', 'Modules.Openarticles.Admin')
        ])->add('description', TranslateType::class, [
            'type' => FormattedTextareaType::class,
            'locales' => $this->locales,
            'hideTabs' => false,
            'required' => false,
            'label' => $this->trans('Description', 'Modules.Openarticles.Admin'),
            'options' => [
                'constraints' => [
                    new CleanHtml([
                        'message' => $this->trans('This field is invalid', 'Admin.Notifications.Error'),
                    ]),
                ],
            ],
        ])->add('active', SwitchType::class, [
            'label'   => $this->trans('Active',  'Modules.Openarticles.Admin'),
            'required' => false,
        ])->add('cover_image', FileType::class, [
                'label'    => $this->trans('Image',  'Modules.Openarticles.Admin'),
                'required' => false,
        ]);

        $id = $options['data']['articleId'] ?? null;

        if ($id && file_exists(_PS_MODULE_DIR_. ArticleImageUploader::IMAGE_PATH . $id.'.jpg')) {
            $builder
                ->add('image_file', CustomContentType::class, [
                    'required' => false,
                    'template' => '@Modules/openarticles/views/templates/admin/upload_image.html.twig',
                    'data' => [
                        'articleId' => $id,
                        'imageUrl' => _MODULE_DIR_ .ArticleImageUploader::IMAGE_PATH . $id.'.jpg',
                    ],
                ]);
        }
    }
}